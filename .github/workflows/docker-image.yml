name: Build and Push WebToPdf Docker Image

on:
  workflow_dispatch:
    inputs:
      deploy_branch:
        description: Branch to deploy
        required: false
        default: master
      testing:
        description: Testing workflow
        required: false
        type: boolean
        default: false
  schedule:
    - cron: '0 0 * * 0'  # Every Sunday at midnight UTC
  push:
    paths:
      - 'WebToPDF-crawler.py'
      - 'requirements.txt'
      - 'Dockerfile'

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v3

    # Step 2: Get the version from the Dockerfile or another source
    - name: Extract version from Dockerfile
      id: get_version
      run: |
        VERSION=$(grep 'ARG VERSION=' Dockerfile | cut -d '=' -f2)
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Version extracted: $VERSION"

    # Step 3: Log in to Docker Hub
    - name: Docker Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Step 4: Log in to GitHub Container Registry (GHCR)
    - name: Docker Login to GHCR
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Step 5: Build the Docker image
    - name: Build and Push Docker Image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile
        push: true
        platforms: linux/amd64,linux/arm64
        tags: |
          ghcr.io/${{ github.repository_owner }}/webtopdf:${{ env.VERSION }}
          ghcr.io/${{ github.repository_owner }}/webtopdf:latest
          ${{ secrets.DOCKER_USER }}/webtopdf:${{ env.VERSION }}
          ${{ secrets.DOCKER_USER }}/webtopdf:latest

    # Step 8: Check if GitHub release exists, and create one if it doesn't
    - name: Check if GitHub release exists
      id: check_release
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" https://api.github.com/repos/${{ github.repository }}/releases/tags/v${{ env.VERSION }})
        if [ "$response" -eq 404 ]; then
          echo "Release does not exist. Creating one."
          echo "create_release=true" >> $GITHUB_ENV
        else
          echo "Release already exists."
          echo "create_release=false" >> $GITHUB_ENV

    # Step 9: Create GitHub release if it does not exist
    - name: Create GitHub release
      if: env.create_release == 'true'
      uses: actions/create-release@v1
      with:
        tag_name: v${{ env.VERSION }}
        release_name: WebToPdf v${{ env.VERSION }}
        draft: false
        prerelease: false
        body: |
          WebToPdf version ${{ env.VERSION }} has been built and released.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Step 10: Add summary details
    - name: Add summary details
      if: always()
      run: |
        echo "## Summary Details" >> $GITHUB_STEP_SUMMARY
        echo "* Docker Image (Docker Hub): ${{ secrets.DOCKER_USER }}/webtopdf:latest, ${{ secrets.DOCKER_USER }}/webtopdf:${{ env.VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "* Docker Image (GHCR): ghcr.io/${{ github.repository_owner }}/webtopdf:latest, ghcr.io/${{ github.repository_owner }}/webtopdf:${{ env.VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "* Deploy Branch: ${{ github.event.inputs.deploy_branch }}" >> $GITHUB_STEP_SUMMARY
        echo "* Testing: ${{ github.event.inputs.testing }}" >> $GITHUB_STEP_SUMMARY
